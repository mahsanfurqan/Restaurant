// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_boilerplate/test/modules/menu/data/repositories/menu_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:flutter_boilerplate/modules/menu/data/data_sources/local/menu_local_data_source.dart'
    as _i11;
import 'package:flutter_boilerplate/modules/menu/data/data_sources/remote/menu_remote_data_source.dart'
    as _i4;
import 'package:flutter_boilerplate/modules/menu/data/models/category_model.dart'
    as _i6;
import 'package:flutter_boilerplate/modules/menu/data/models/menu_model.dart'
    as _i7;
import 'package:flutter_boilerplate/modules/menu/data/models/menu_request_model.dart'
    as _i8;
import 'package:flutter_boilerplate/modules/menu/data/models/restaurant_model.dart'
    as _i10;
import 'package:flutter_boilerplate/modules/menu/data/models/storage_model.dart'
    as _i9;
import 'package:flutter_boilerplate/shared/responses/base_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseResponse_1<T> extends _i1.SmartFake
    implements _i3.BaseResponse<T> {
  _FakeBaseResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MenuRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMenuRemoteDataSource extends _i1.Mock
    implements _i4.MenuRemoteDataSource {
  MockMenuRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dioClient => (super.noSuchMethod(
        Invocation.getter(#dioClient),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dioClient),
        ),
      ) as _i2.Dio);

  @override
  _i5.Future<_i3.BaseResponse<List<_i6.CategoryModel>>> getCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue:
            _i5.Future<_i3.BaseResponse<List<_i6.CategoryModel>>>.value(
                _FakeBaseResponse_1<List<_i6.CategoryModel>>(
          this,
          Invocation.method(
            #getCategories,
            [],
          ),
        )),
      ) as _i5.Future<_i3.BaseResponse<List<_i6.CategoryModel>>>);

  @override
  _i5.Future<_i3.BaseResponse<_i7.MenuModel>> createMenu(
          _i8.MenuRequestModel? body) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMenu,
          [body],
        ),
        returnValue: _i5.Future<_i3.BaseResponse<_i7.MenuModel>>.value(
            _FakeBaseResponse_1<_i7.MenuModel>(
          this,
          Invocation.method(
            #createMenu,
            [body],
          ),
        )),
      ) as _i5.Future<_i3.BaseResponse<_i7.MenuModel>>);

  @override
  _i5.Future<_i3.BaseResponse<List<_i7.MenuModel>>> getMenus() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMenus,
          [],
        ),
        returnValue: _i5.Future<_i3.BaseResponse<List<_i7.MenuModel>>>.value(
            _FakeBaseResponse_1<List<_i7.MenuModel>>(
          this,
          Invocation.method(
            #getMenus,
            [],
          ),
        )),
      ) as _i5.Future<_i3.BaseResponse<List<_i7.MenuModel>>>);

  @override
  _i5.Future<
      _i3.BaseResponse<_i9.StorageUploadResponseModel>> uploadFileWithDio({
    required String? filePath,
    required String? folder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFileWithDio,
          [],
          {
            #filePath: filePath,
            #folder: folder,
          },
        ),
        returnValue:
            _i5.Future<_i3.BaseResponse<_i9.StorageUploadResponseModel>>.value(
                _FakeBaseResponse_1<_i9.StorageUploadResponseModel>(
          this,
          Invocation.method(
            #uploadFileWithDio,
            [],
            {
              #filePath: filePath,
              #folder: folder,
            },
          ),
        )),
      ) as _i5.Future<_i3.BaseResponse<_i9.StorageUploadResponseModel>>);

  @override
  _i5.Future<void> deleteMenu(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMenu,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.BaseResponse<_i10.RestaurantModel>> getRestaurant(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurant,
          [id],
        ),
        returnValue: _i5.Future<_i3.BaseResponse<_i10.RestaurantModel>>.value(
            _FakeBaseResponse_1<_i10.RestaurantModel>(
          this,
          Invocation.method(
            #getRestaurant,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.BaseResponse<_i10.RestaurantModel>>);

  @override
  _i5.Future<_i3.BaseResponse<_i10.RestaurantModel>> updateRestaurant(
    int? id,
    Map<String, dynamic>? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRestaurant,
          [
            id,
            body,
          ],
        ),
        returnValue: _i5.Future<_i3.BaseResponse<_i10.RestaurantModel>>.value(
            _FakeBaseResponse_1<_i10.RestaurantModel>(
          this,
          Invocation.method(
            #updateRestaurant,
            [
              id,
              body,
            ],
          ),
        )),
      ) as _i5.Future<_i3.BaseResponse<_i10.RestaurantModel>>);
}

/// A class which mocks [MenuLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMenuLocalDataSource extends _i1.Mock
    implements _i11.MenuLocalDataSource {
  MockMenuLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i7.MenuModel>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue: _i5.Future<List<_i7.MenuModel>>.value(<_i7.MenuModel>[]),
      ) as _i5.Future<List<_i7.MenuModel>>);

  @override
  _i5.Future<List<_i6.CategoryModel>> findAllCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllCategories,
          [],
        ),
        returnValue:
            _i5.Future<List<_i6.CategoryModel>>.value(<_i6.CategoryModel>[]),
      ) as _i5.Future<List<_i6.CategoryModel>>);

  @override
  _i5.Future<String> insertAll(List<_i7.MenuModel>? menus) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAll,
          [menus],
        ),
        returnValue: _i5.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #insertAll,
            [menus],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<String> insertAllCategories(List<_i6.CategoryModel>? categories) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAllCategories,
          [categories],
        ),
        returnValue: _i5.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #insertAllCategories,
            [categories],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<String> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i5.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #clearAll,
            [],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<String> clearAllCategories() => (super.noSuchMethod(
        Invocation.method(
          #clearAllCategories,
          [],
        ),
        returnValue: _i5.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #clearAllCategories,
            [],
          ),
        )),
      ) as _i5.Future<String>);
}
