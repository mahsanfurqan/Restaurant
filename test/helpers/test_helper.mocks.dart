// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_boilerplate/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:ui' as _i15;

import 'package:dartz/dartz.dart' as _i4;
import 'package:flutter/material.dart' as _i33;
import 'package:flutter/widgets.dart' as _i3;
import 'package:flutter_boilerplate/core/common/failures.dart' as _i20;
import 'package:flutter_boilerplate/core/common/network_info.dart' as _i51;
import 'package:flutter_boilerplate/core/common/token_manager.dart' as _i50;
import 'package:flutter_boilerplate/modules/auth/data/data_sources/local/auth_local_data_source.dart'
    as _i36;
import 'package:flutter_boilerplate/modules/auth/data/data_sources/remote/auth_remote_data_source.dart'
    as _i34;
import 'package:flutter_boilerplate/modules/auth/data/data_sources/remote/services/auth_service.dart'
    as _i47;
import 'package:flutter_boilerplate/modules/auth/data/models/auth_validate_model.dart'
    as _i24;
import 'package:flutter_boilerplate/modules/auth/data/models/login_dto.dart'
    as _i23;
import 'package:flutter_boilerplate/modules/auth/data/models/logout_dto.dart'
    as _i35;
import 'package:flutter_boilerplate/modules/auth/data/models/refresh_token_dto.dart'
    as _i27;
import 'package:flutter_boilerplate/modules/auth/data/models/register_request_model.dart'
    as _i26;
import 'package:flutter_boilerplate/modules/auth/data/models/register_response_model.dart'
    as _i25;
import 'package:flutter_boilerplate/modules/auth/data/models/token_model.dart'
    as _i22;
import 'package:flutter_boilerplate/modules/auth/data/repositories/auth_repository.dart'
    as _i19;
import 'package:flutter_boilerplate/modules/chat/presentation/controllers/chat_controller.dart'
    as _i18;
import 'package:flutter_boilerplate/modules/home/presentation/controllers/home_controller.dart'
    as _i10;
import 'package:flutter_boilerplate/modules/localization/data/data_sources/local/localization_local_data_source.dart'
    as _i42;
import 'package:flutter_boilerplate/modules/localization/data/repositories/localization_repository.dart'
    as _i31;
import 'package:flutter_boilerplate/modules/note/data/data_sources/local/db/note_dao.dart'
    as _i45;
import 'package:flutter_boilerplate/modules/note/data/data_sources/local/entities/note_entity.dart'
    as _i46;
import 'package:flutter_boilerplate/modules/note/data/data_sources/local/note_local_data_source.dart'
    as _i40;
import 'package:flutter_boilerplate/modules/note/data/data_sources/remote/note_remote_data_source.dart'
    as _i38;
import 'package:flutter_boilerplate/modules/note/data/data_sources/remote/services/note_service.dart'
    as _i49;
import 'package:flutter_boilerplate/modules/note/data/models/note_dto.dart'
    as _i29;
import 'package:flutter_boilerplate/modules/note/data/models/note_model.dart'
    as _i12;
import 'package:flutter_boilerplate/modules/note/data/repositories/note_repository.dart'
    as _i28;
import 'package:flutter_boilerplate/modules/note/presentation/controllers/note_detail_controller.dart'
    as _i16;
import 'package:flutter_boilerplate/modules/note/presentation/controllers/note_form_controller.dart'
    as _i17;
import 'package:flutter_boilerplate/modules/socket/data/data_sources/remote/socket_remote_data_source.dart'
    as _i41;
import 'package:flutter_boilerplate/modules/socket/data/repository/socket_repository.dart'
    as _i30;
import 'package:flutter_boilerplate/modules/theme/data/data_source/local/theme_local_data_source.dart'
    as _i5;
import 'package:flutter_boilerplate/modules/theme/data/repositories/theme_repository.dart'
    as _i32;
import 'package:flutter_boilerplate/modules/user/data/data_sources/local/db/user_dao.dart'
    as _i43;
import 'package:flutter_boilerplate/modules/user/data/data_sources/local/entities/user_entity.dart'
    as _i44;
import 'package:flutter_boilerplate/modules/user/data/data_sources/remote/services/user_service.dart'
    as _i48;
import 'package:flutter_boilerplate/modules/user/data/data_sources/remote/user_remote_data_source.dart'
    as _i37;
import 'package:flutter_boilerplate/modules/user/data/models/user_me_model.dart'
    as _i7;
import 'package:flutter_boilerplate/modules/user/data/models/user_model.dart'
    as _i21;
import 'package:flutter_boilerplate/shared/responses/base_response.dart' as _i6;
import 'package:flutter_boilerplate/shared/utils/result_state/result_state.dart'
    as _i11;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i8;
import 'package:get/get.dart' as _i2;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i39;
import 'package:web_socket_channel/web_socket_channel.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRx_0<T> extends _i1.SmartFake implements _i2.Rx<T> {
  _FakeRx_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternalFinalCallback_1<T> extends _i1.SmartFake
    implements _i2.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGlobalKey_2<T extends _i3.State<_i3.StatefulWidget>>
    extends _i1.SmartFake implements _i3.GlobalKey<T> {
  _FakeGlobalKey_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextEditingController_3 extends _i1.SmartFake
    implements _i3.TextEditingController {
  _FakeTextEditingController_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRxString_4 extends _i1.SmartFake implements _i2.RxString {
  _FakeRxString_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_5<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeThemeLocalDataSource_6 extends _i1.SmartFake
    implements _i5.ThemeLocalDataSource {
  _FakeThemeLocalDataSource_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseResponse_7<T> extends _i1.SmartFake
    implements _i6.BaseResponse<T> {
  _FakeBaseResponse_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserMeModel_8 extends _i1.SmartFake implements _i7.UserMeModel {
  _FakeUserMeModel_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSOptions_9 extends _i1.SmartFake implements _i8.IOSOptions {
  _FakeIOSOptions_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidOptions_10 extends _i1.SmartFake
    implements _i8.AndroidOptions {
  _FakeAndroidOptions_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxOptions_11 extends _i1.SmartFake implements _i8.LinuxOptions {
  _FakeLinuxOptions_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsOptions_12 extends _i1.SmartFake
    implements _i8.WindowsOptions {
  _FakeWindowsOptions_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebOptions_13 extends _i1.SmartFake implements _i8.WebOptions {
  _FakeWebOptions_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsOptions_14 extends _i1.SmartFake implements _i8.MacOsOptions {
  _FakeMacOsOptions_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebSocketChannel_15 extends _i1.SmartFake
    implements _i9.WebSocketChannel {
  _FakeWebSocketChannel_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeController].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeController extends _i1.Mock implements _i10.HomeController {
  MockHomeController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set page(int? _page) => super.noSuchMethod(
        Invocation.setter(
          #page,
          _page,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get limit => (super.noSuchMethod(
        Invocation.getter(#limit),
        returnValue: 0,
      ) as int);

  @override
  set limit(int? _limit) => super.noSuchMethod(
        Invocation.setter(
          #limit,
          _limit,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Rx<_i11.ResultState<List<_i12.NoteModel>>> get notesState =>
      (super.noSuchMethod(
        Invocation.getter(#notesState),
        returnValue: _FakeRx_0<_i11.ResultState<List<_i12.NoteModel>>>(
          this,
          Invocation.getter(#notesState),
        ),
      ) as _i2.Rx<_i11.ResultState<List<_i12.NoteModel>>>);

  @override
  _i2.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  int get listeners => (super.noSuchMethod(
        Invocation.getter(#listeners),
        returnValue: 0,
      ) as int);

  @override
  _i13.Future<void> onInit() => (super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> onRefresh() => (super.noSuchMethod(
        Invocation.method(
          #onRefresh,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> onLoadMore() => (super.noSuchMethod(
        Invocation.method(
          #onLoadMore,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> fetchNotes({
    bool? refresh = false,
    bool? loadMore = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNotes,
          [],
          {
            #refresh: refresh,
            #loadMore: loadMore,
          },
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void update([
    List<Object>? ids,
    bool? condition = true,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            ids,
            condition,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Disposer addListener(_i14.GetStateUpdate? listener) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValue: () {},
      ) as _i14.Disposer);

  @override
  void removeListener(_i15.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
        Invocation.method(
          #refreshGroup,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyChildrens() => super.noSuchMethod(
        Invocation.method(
          #notifyChildrens,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListenerId(
    Object? id,
    _i15.VoidCallback? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeListenerId,
          [
            id,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Disposer addListenerId(
    Object? key,
    _i14.GetStateUpdate? listener,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListenerId,
          [
            key,
            listener,
          ],
        ),
        returnValue: () {},
      ) as _i14.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
        Invocation.method(
          #disposeId,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NoteDetailController].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteDetailController extends _i1.Mock
    implements _i16.NoteDetailController {
  MockNoteDetailController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set id(int? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Rx<_i11.ResultState<_i12.NoteModel>> get noteState => (super.noSuchMethod(
        Invocation.getter(#noteState),
        returnValue: _FakeRx_0<_i11.ResultState<_i12.NoteModel>>(
          this,
          Invocation.getter(#noteState),
        ),
      ) as _i2.Rx<_i11.ResultState<_i12.NoteModel>>);

  @override
  _i2.Rx<_i11.ResultState<String>> get deleteNoteState => (super.noSuchMethod(
        Invocation.getter(#deleteNoteState),
        returnValue: _FakeRx_0<_i11.ResultState<String>>(
          this,
          Invocation.getter(#deleteNoteState),
        ),
      ) as _i2.Rx<_i11.ResultState<String>>);

  @override
  _i2.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  int get listeners => (super.noSuchMethod(
        Invocation.getter(#listeners),
        returnValue: 0,
      ) as int);

  @override
  _i13.Future<void> onInit() => (super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> getNoteById() => (super.noSuchMethod(
        Invocation.method(
          #getNoteById,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> deleteNote({
    dynamic Function()? onLoading,
    dynamic Function(String)? onFailed,
    dynamic Function(String)? onSuccess,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [],
          {
            #onLoading: onLoading,
            #onFailed: onFailed,
            #onSuccess: onSuccess,
          },
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void update([
    List<Object>? ids,
    bool? condition = true,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            ids,
            condition,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Disposer addListener(_i14.GetStateUpdate? listener) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValue: () {},
      ) as _i14.Disposer);

  @override
  void removeListener(_i15.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
        Invocation.method(
          #refreshGroup,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyChildrens() => super.noSuchMethod(
        Invocation.method(
          #notifyChildrens,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListenerId(
    Object? id,
    _i15.VoidCallback? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeListenerId,
          [
            id,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Disposer addListenerId(
    Object? key,
    _i14.GetStateUpdate? listener,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListenerId,
          [
            key,
            listener,
          ],
        ),
        returnValue: () {},
      ) as _i14.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
        Invocation.method(
          #disposeId,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NoteFormController].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteFormController extends _i1.Mock
    implements _i17.NoteFormController {
  MockNoteFormController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set note(_i12.NoteModel? _note) => super.noSuchMethod(
        Invocation.setter(
          #note,
          _note,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.GlobalKey<_i3.FormState> get formKey => (super.noSuchMethod(
        Invocation.getter(#formKey),
        returnValue: _FakeGlobalKey_2<_i3.FormState>(
          this,
          Invocation.getter(#formKey),
        ),
      ) as _i3.GlobalKey<_i3.FormState>);

  @override
  _i3.TextEditingController get titleCtrl => (super.noSuchMethod(
        Invocation.getter(#titleCtrl),
        returnValue: _FakeTextEditingController_3(
          this,
          Invocation.getter(#titleCtrl),
        ),
      ) as _i3.TextEditingController);

  @override
  _i3.TextEditingController get contentCtrl => (super.noSuchMethod(
        Invocation.getter(#contentCtrl),
        returnValue: _FakeTextEditingController_3(
          this,
          Invocation.getter(#contentCtrl),
        ),
      ) as _i3.TextEditingController);

  @override
  _i2.Rx<_i11.ResultState<bool>> get saveNoteState => (super.noSuchMethod(
        Invocation.getter(#saveNoteState),
        returnValue: _FakeRx_0<_i11.ResultState<bool>>(
          this,
          Invocation.getter(#saveNoteState),
        ),
      ) as _i2.Rx<_i11.ResultState<bool>>);

  @override
  _i2.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  int get listeners => (super.noSuchMethod(
        Invocation.getter(#listeners),
        returnValue: 0,
      ) as int);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> saveNote({
    dynamic Function(String)? onFailed,
    dynamic Function(bool)? onSuccess,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveNote,
          [],
          {
            #onFailed: onFailed,
            #onSuccess: onSuccess,
          },
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void update([
    List<Object>? ids,
    bool? condition = true,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            ids,
            condition,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Disposer addListener(_i14.GetStateUpdate? listener) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValue: () {},
      ) as _i14.Disposer);

  @override
  void removeListener(_i15.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
        Invocation.method(
          #refreshGroup,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyChildrens() => super.noSuchMethod(
        Invocation.method(
          #notifyChildrens,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListenerId(
    Object? id,
    _i15.VoidCallback? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeListenerId,
          [
            id,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Disposer addListenerId(
    Object? key,
    _i14.GetStateUpdate? listener,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListenerId,
          [
            key,
            listener,
          ],
        ),
        returnValue: () {},
      ) as _i14.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
        Invocation.method(
          #disposeId,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ChatController].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatController extends _i1.Mock implements _i18.ChatController {
  MockChatController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TextEditingController get messageCtrl => (super.noSuchMethod(
        Invocation.getter(#messageCtrl),
        returnValue: _FakeTextEditingController_3(
          this,
          Invocation.getter(#messageCtrl),
        ),
      ) as _i3.TextEditingController);

  @override
  _i2.RxString get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: _FakeRxString_4(
          this,
          Invocation.getter(#message),
        ),
      ) as _i2.RxString);

  @override
  _i2.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  int get listeners => (super.noSuchMethod(
        Invocation.getter(#listeners),
        returnValue: 0,
      ) as int);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void connect(String? url) => super.noSuchMethod(
        Invocation.method(
          #connect,
          [url],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendMessage() => super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disconnect() => super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void update([
    List<Object>? ids,
    bool? condition = true,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            ids,
            condition,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Disposer addListener(_i14.GetStateUpdate? listener) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValue: () {},
      ) as _i14.Disposer);

  @override
  void removeListener(_i15.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
        Invocation.method(
          #refreshGroup,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyChildrens() => super.noSuchMethod(
        Invocation.method(
          #notifyChildrens,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListenerId(
    Object? id,
    _i15.VoidCallback? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeListenerId,
          [
            id,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Disposer addListenerId(
    Object? key,
    _i14.GetStateUpdate? listener,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListenerId,
          [
            key,
            listener,
          ],
        ),
        returnValue: () {},
      ) as _i14.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
        Invocation.method(
          #disposeId,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i19.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i4.Either<_i20.Failure, _i21.UserModel>> getActiveUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveUser,
          [],
        ),
        returnValue:
            _i13.Future<_i4.Either<_i20.Failure, _i21.UserModel>>.value(
                _FakeEither_5<_i20.Failure, _i21.UserModel>(
          this,
          Invocation.method(
            #getActiveUser,
            [],
          ),
        )),
      ) as _i13.Future<_i4.Either<_i20.Failure, _i21.UserModel>>);

  @override
  _i13.Future<
      _i4.Either<_i20.Failure, _i6.BaseResponse<_i22.TokenModel>>> login(
          _i23.LoginDto? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [payload],
        ),
        returnValue: _i13.Future<
                _i4
                .Either<_i20.Failure, _i6.BaseResponse<_i22.TokenModel>>>.value(
            _FakeEither_5<_i20.Failure, _i6.BaseResponse<_i22.TokenModel>>(
          this,
          Invocation.method(
            #login,
            [payload],
          ),
        )),
      ) as _i13
          .Future<_i4.Either<_i20.Failure, _i6.BaseResponse<_i22.TokenModel>>>);

  @override
  _i13.Future<_i4.Either<_i20.Failure, _i24.AuthValidateModel>>
      validateAuth() => (super.noSuchMethod(
            Invocation.method(
              #validateAuth,
              [],
            ),
            returnValue: _i13
                .Future<_i4.Either<_i20.Failure, _i24.AuthValidateModel>>.value(
                _FakeEither_5<_i20.Failure, _i24.AuthValidateModel>(
              this,
              Invocation.method(
                #validateAuth,
                [],
              ),
            )),
          ) as _i13.Future<_i4.Either<_i20.Failure, _i24.AuthValidateModel>>);

  @override
  _i13.Future<_i4.Either<_i20.Failure, _i24.AuthValidateModel>>
      quickAuthCheck() => (super.noSuchMethod(
            Invocation.method(
              #quickAuthCheck,
              [],
            ),
            returnValue: _i13
                .Future<_i4.Either<_i20.Failure, _i24.AuthValidateModel>>.value(
                _FakeEither_5<_i20.Failure, _i24.AuthValidateModel>(
              this,
              Invocation.method(
                #quickAuthCheck,
                [],
              ),
            )),
          ) as _i13.Future<_i4.Either<_i20.Failure, _i24.AuthValidateModel>>);

  @override
  _i13.Future<_i4.Either<_i20.Failure, _i24.AuthValidateModel>>
      createAuthFromToken() => (super.noSuchMethod(
            Invocation.method(
              #createAuthFromToken,
              [],
            ),
            returnValue: _i13
                .Future<_i4.Either<_i20.Failure, _i24.AuthValidateModel>>.value(
                _FakeEither_5<_i20.Failure, _i24.AuthValidateModel>(
              this,
              Invocation.method(
                #createAuthFromToken,
                [],
              ),
            )),
          ) as _i13.Future<_i4.Either<_i20.Failure, _i24.AuthValidateModel>>);

  @override
  _i13.Future<_i4.Either<_i20.Failure, bool>> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i13.Future<_i4.Either<_i20.Failure, bool>>.value(
            _FakeEither_5<_i20.Failure, bool>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i13.Future<_i4.Either<_i20.Failure, bool>>);

  @override
  _i13.Future<_i4.Either<_i20.Failure, _i6.BaseResponse<void>>> register(
          _i26.RegisterRequestModel? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [payload],
        ),
        returnValue:
            _i13.Future<_i4.Either<_i20.Failure, _i6.BaseResponse<void>>>.value(
                _FakeEither_5<_i20.Failure, _i6.BaseResponse<void>>(
          this,
          Invocation.method(
            #register,
            [payload],
          ),
        )),
      ) as _i13.Future<_i4.Either<_i20.Failure, _i6.BaseResponse<void>>>);

  @override
  _i13.Future<
      _i4.Either<_i20.Failure, _i6.BaseResponse<_i22.TokenModel>>> refreshToken(
          _i27.RefreshTokenDto? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [payload],
        ),
        returnValue: _i13.Future<
                _i4
                .Either<_i20.Failure, _i6.BaseResponse<_i22.TokenModel>>>.value(
            _FakeEither_5<_i20.Failure, _i6.BaseResponse<_i22.TokenModel>>(
          this,
          Invocation.method(
            #refreshToken,
            [payload],
          ),
        )),
      ) as _i13
          .Future<_i4.Either<_i20.Failure, _i6.BaseResponse<_i22.TokenModel>>>);
}

/// A class which mocks [NoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRepository extends _i1.Mock implements _i28.NoteRepository {
  MockNoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<
      _i4.Either<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>> createNote(
          _i29.NoteDto? note) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNote,
          [note],
        ),
        returnValue: _i13.Future<
                _i4
                .Either<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>>.value(
            _FakeEither_5<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>(
          this,
          Invocation.method(
            #createNote,
            [note],
          ),
        )),
      ) as _i13
          .Future<_i4.Either<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>>);

  @override
  _i13.Future<_i4.Either<_i20.Failure, String>> deleteNote(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [id],
        ),
        returnValue: _i13.Future<_i4.Either<_i20.Failure, String>>.value(
            _FakeEither_5<_i20.Failure, String>(
          this,
          Invocation.method(
            #deleteNote,
            [id],
          ),
        )),
      ) as _i13.Future<_i4.Either<_i20.Failure, String>>);

  @override
  _i13.Future<_i4.Either<_i20.Failure, List<_i12.NoteModel>>> fetchNotes({
    bool? refresh = false,
    bool? loadMore = false,
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNotes,
          [],
          {
            #refresh: refresh,
            #loadMore: loadMore,
            #page: page,
            #limit: limit,
          },
        ),
        returnValue:
            _i13.Future<_i4.Either<_i20.Failure, List<_i12.NoteModel>>>.value(
                _FakeEither_5<_i20.Failure, List<_i12.NoteModel>>(
          this,
          Invocation.method(
            #fetchNotes,
            [],
            {
              #refresh: refresh,
              #loadMore: loadMore,
              #page: page,
              #limit: limit,
            },
          ),
        )),
      ) as _i13.Future<_i4.Either<_i20.Failure, List<_i12.NoteModel>>>);

  @override
  _i13.Future<
      _i4.Either<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>> getNoteById(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNoteById,
          [id],
        ),
        returnValue: _i13.Future<
                _i4
                .Either<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>>.value(
            _FakeEither_5<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>(
          this,
          Invocation.method(
            #getNoteById,
            [id],
          ),
        )),
      ) as _i13
          .Future<_i4.Either<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>>);

  @override
  _i13.Future<
      _i4.Either<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>> updateNote(
    int? id,
    _i29.NoteDto? note,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [
            id,
            note,
          ],
        ),
        returnValue: _i13.Future<
                _i4
                .Either<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>>.value(
            _FakeEither_5<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>(
          this,
          Invocation.method(
            #updateNote,
            [
              id,
              note,
            ],
          ),
        )),
      ) as _i13
          .Future<_i4.Either<_i20.Failure, _i6.BaseResponse<_i12.NoteModel>>>);
}

/// A class which mocks [SocketRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocketRepository extends _i1.Mock implements _i30.SocketRepository {
  MockSocketRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i13.Future<_i4.Either<_i20.Failure, void>> connect(String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [url],
        ),
        returnValue: _i13.Future<_i4.Either<_i20.Failure, void>>.value(
            _FakeEither_5<_i20.Failure, void>(
          this,
          Invocation.method(
            #connect,
            [url],
          ),
        )),
      ) as _i13.Future<_i4.Either<_i20.Failure, void>>);

  @override
  _i13.Future<_i4.Either<_i20.Failure, void>> disconnect() =>
      (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i13.Future<_i4.Either<_i20.Failure, void>>.value(
            _FakeEither_5<_i20.Failure, void>(
          this,
          Invocation.method(
            #disconnect,
            [],
          ),
        )),
      ) as _i13.Future<_i4.Either<_i20.Failure, void>>);

  @override
  _i13.Future<_i4.Either<_i20.Failure, void>> sendMessage(String? message) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
        ),
        returnValue: _i13.Future<_i4.Either<_i20.Failure, void>>.value(
            _FakeEither_5<_i20.Failure, void>(
          this,
          Invocation.method(
            #sendMessage,
            [message],
          ),
        )),
      ) as _i13.Future<_i4.Either<_i20.Failure, void>>);

  @override
  _i13.Stream<String> receiveMessages() => (super.noSuchMethod(
        Invocation.method(
          #receiveMessages,
          [],
        ),
        returnValue: _i13.Stream<String>.empty(),
      ) as _i13.Stream<String>);
}

/// A class which mocks [LocalizationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationRepository extends _i1.Mock
    implements _i31.LocalizationRepository {
  MockLocalizationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool> saveLocale(String? locale) => (super.noSuchMethod(
        Invocation.method(
          #saveLocale,
          [locale],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<_i15.Locale?> getSavedLocale() => (super.noSuchMethod(
        Invocation.method(
          #getSavedLocale,
          [],
        ),
        returnValue: _i13.Future<_i15.Locale?>.value(),
      ) as _i13.Future<_i15.Locale?>);
}

/// A class which mocks [ThemeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeRepository extends _i1.Mock implements _i32.ThemeRepository {
  MockThemeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ThemeLocalDataSource get localDataSource => (super.noSuchMethod(
        Invocation.getter(#localDataSource),
        returnValue: _FakeThemeLocalDataSource_6(
          this,
          Invocation.getter(#localDataSource),
        ),
      ) as _i5.ThemeLocalDataSource);

  @override
  _i13.Future<bool> saveThemeMode(String? themeMode) => (super.noSuchMethod(
        Invocation.method(
          #saveThemeMode,
          [themeMode],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<_i33.ThemeMode?> getSavedThemeMode() => (super.noSuchMethod(
        Invocation.method(
          #getSavedThemeMode,
          [],
        ),
        returnValue: _i13.Future<_i33.ThemeMode?>.value(),
      ) as _i13.Future<_i33.ThemeMode?>);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i34.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i6.BaseResponse<_i22.TokenModel>> login(
          _i23.LoginDto? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [payload],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i22.TokenModel>>.value(
            _FakeBaseResponse_7<_i22.TokenModel>(
          this,
          Invocation.method(
            #login,
            [payload],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i22.TokenModel>>);

  @override
  _i13.Future<_i6.BaseResponse<_i24.AuthValidateModel>> validateAuth() =>
      (super.noSuchMethod(
        Invocation.method(
          #validateAuth,
          [],
        ),
        returnValue:
            _i13.Future<_i6.BaseResponse<_i24.AuthValidateModel>>.value(
                _FakeBaseResponse_7<_i24.AuthValidateModel>(
          this,
          Invocation.method(
            #validateAuth,
            [],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i24.AuthValidateModel>>);

  @override
  _i13.Future<_i6.BaseResponse<void>> logout(_i35.LogoutDto? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #logout,
          [payload],
        ),
        returnValue:
            _i13.Future<_i6.BaseResponse<void>>.value(_FakeBaseResponse_7<void>(
          this,
          Invocation.method(
            #logout,
            [payload],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<void>>);

  @override
  _i13.Future<_i6.BaseResponse<void>> register(
          _i26.RegisterRequestModel? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [payload],
        ),
        returnValue:
            _i13.Future<_i6.BaseResponse<void>>.value(_FakeBaseResponse_7<void>(
          this,
          Invocation.method(
            #register,
            [payload],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<void>>);

  @override
  _i13.Future<_i6.BaseResponse<_i22.TokenModel>> refreshToken(
          _i27.RefreshTokenDto? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [payload],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i22.TokenModel>>.value(
            _FakeBaseResponse_7<_i22.TokenModel>(
          this,
          Invocation.method(
            #refreshToken,
            [payload],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i22.TokenModel>>);
}

/// A class which mocks [AuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalDataSource extends _i1.Mock
    implements _i36.AuthLocalDataSource {
  MockAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool> setAuthSession(_i24.AuthValidateModel? auth) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAuthSession,
          [auth],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<_i24.AuthValidateModel?> getAuthSession() => (super.noSuchMethod(
        Invocation.method(
          #getAuthSession,
          [],
        ),
        returnValue: _i13.Future<_i24.AuthValidateModel?>.value(),
      ) as _i13.Future<_i24.AuthValidateModel?>);

  @override
  _i13.Future<bool> setToken(_i22.TokenModel? tokenResponse) =>
      (super.noSuchMethod(
        Invocation.method(
          #setToken,
          [tokenResponse],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<String?> getAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #getAccessToken,
          [],
        ),
        returnValue: _i13.Future<String?>.value(),
      ) as _i13.Future<String?>);

  @override
  _i13.Future<String?> getRefreshToken() => (super.noSuchMethod(
        Invocation.method(
          #getRefreshToken,
          [],
        ),
        returnValue: _i13.Future<String?>.value(),
      ) as _i13.Future<String?>);

  @override
  _i13.Future<bool> deleteRefreshToken() => (super.noSuchMethod(
        Invocation.method(
          #deleteRefreshToken,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> clearSession() => (super.noSuchMethod(
        Invocation.method(
          #clearSession,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);
}

/// A class which mocks [UserRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSource extends _i1.Mock
    implements _i37.UserRemoteDataSource {
  MockUserRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i6.BaseResponse<_i21.UserModel>> getUserById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserById,
          [id],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i21.UserModel>>.value(
            _FakeBaseResponse_7<_i21.UserModel>(
          this,
          Invocation.method(
            #getUserById,
            [id],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i21.UserModel>>);

  @override
  _i13.Future<_i7.UserMeModel> getMe() => (super.noSuchMethod(
        Invocation.method(
          #getMe,
          [],
        ),
        returnValue: _i13.Future<_i7.UserMeModel>.value(_FakeUserMeModel_8(
          this,
          Invocation.method(
            #getMe,
            [],
          ),
        )),
      ) as _i13.Future<_i7.UserMeModel>);
}

/// A class which mocks [NoteRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRemoteDataSource extends _i1.Mock
    implements _i38.NoteRemoteDataSource {
  MockNoteRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i6.BaseResponse<_i12.NoteModel>> create(_i29.NoteDto? note) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [note],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i12.NoteModel>>.value(
            _FakeBaseResponse_7<_i12.NoteModel>(
          this,
          Invocation.method(
            #create,
            [note],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i12.NoteModel>>);

  @override
  _i13.Future<String> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i13.Future<String>.value(_i39.dummyValue<String>(
          this,
          Invocation.method(
            #delete,
            [id],
          ),
        )),
      ) as _i13.Future<String>);

  @override
  _i13.Future<_i6.BaseResponse<List<_i12.NoteModel>>> fetch(
    int? page,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [
            page,
            limit,
          ],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<List<_i12.NoteModel>>>.value(
            _FakeBaseResponse_7<List<_i12.NoteModel>>(
          this,
          Invocation.method(
            #fetch,
            [
              page,
              limit,
            ],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<List<_i12.NoteModel>>>);

  @override
  _i13.Future<_i6.BaseResponse<_i12.NoteModel>> getById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i12.NoteModel>>.value(
            _FakeBaseResponse_7<_i12.NoteModel>(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i12.NoteModel>>);

  @override
  _i13.Future<_i6.BaseResponse<_i12.NoteModel>> update(
    int? id,
    _i29.NoteDto? note,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            note,
          ],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i12.NoteModel>>.value(
            _FakeBaseResponse_7<_i12.NoteModel>(
          this,
          Invocation.method(
            #update,
            [
              id,
              note,
            ],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i12.NoteModel>>);
}

/// A class which mocks [NoteLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteLocalDataSource extends _i1.Mock
    implements _i40.NoteLocalDataSource {
  MockNoteLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<List<_i12.NoteModel>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue:
            _i13.Future<List<_i12.NoteModel>>.value(<_i12.NoteModel>[]),
      ) as _i13.Future<List<_i12.NoteModel>>);

  @override
  _i13.Future<String> insertAll(List<_i12.NoteModel>? notes) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAll,
          [notes],
        ),
        returnValue: _i13.Future<String>.value(_i39.dummyValue<String>(
          this,
          Invocation.method(
            #insertAll,
            [notes],
          ),
        )),
      ) as _i13.Future<String>);

  @override
  _i13.Future<String> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i13.Future<String>.value(_i39.dummyValue<String>(
          this,
          Invocation.method(
            #clearAll,
            [],
          ),
        )),
      ) as _i13.Future<String>);
}

/// A class which mocks [SocketRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocketRemoteDataSource extends _i1.Mock
    implements _i41.SocketRemoteDataSource {
  MockSocketRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Stream<String> get messages => (super.noSuchMethod(
        Invocation.getter(#messages),
        returnValue: _i13.Stream<String>.empty(),
      ) as _i13.Stream<String>);

  @override
  bool isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i13.Future<void> connect(String? url) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [url],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> sendMessage(String? message) => (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [LocalizationLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationLocalDataSource extends _i1.Mock
    implements _i42.LocalizationLocalDataSource {
  MockLocalizationLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool> saveLocale(String? locale) => (super.noSuchMethod(
        Invocation.method(
          #saveLocale,
          [locale],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<_i15.Locale?> getSavedLocale() => (super.noSuchMethod(
        Invocation.method(
          #getSavedLocale,
          [],
        ),
        returnValue: _i13.Future<_i15.Locale?>.value(),
      ) as _i13.Future<_i15.Locale?>);
}

/// A class which mocks [ThemeLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeLocalDataSource extends _i1.Mock
    implements _i5.ThemeLocalDataSource {
  MockThemeLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool> saveThemeMode(String? themeMode) => (super.noSuchMethod(
        Invocation.method(
          #saveThemeMode,
          [themeMode],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<_i33.ThemeMode?> getSavedThemeMode() => (super.noSuchMethod(
        Invocation.method(
          #getSavedThemeMode,
          [],
        ),
        returnValue: _i13.Future<_i33.ThemeMode?>.value(),
      ) as _i13.Future<_i33.ThemeMode?>);
}

/// A class which mocks [UserDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDao extends _i1.Mock implements _i43.UserDao {
  MockUserDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<List<_i44.UserEntity>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue:
            _i13.Future<List<_i44.UserEntity>>.value(<_i44.UserEntity>[]),
      ) as _i13.Future<List<_i44.UserEntity>>);

  @override
  _i13.Future<List<int>> insertAll(List<_i44.UserEntity>? users) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAll,
          [users],
        ),
        returnValue: _i13.Future<List<int>>.value(<int>[]),
      ) as _i13.Future<List<int>>);

  @override
  _i13.Future<_i44.UserEntity?> findById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i13.Future<_i44.UserEntity?>.value(),
      ) as _i13.Future<_i44.UserEntity?>);

  @override
  _i13.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [NoteDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteDao extends _i1.Mock implements _i45.NoteDao {
  MockNoteDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<List<_i46.NoteEntity>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue:
            _i13.Future<List<_i46.NoteEntity>>.value(<_i46.NoteEntity>[]),
      ) as _i13.Future<List<_i46.NoteEntity>>);

  @override
  _i13.Future<List<int>> insertAll(List<_i46.NoteEntity>? notes) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAll,
          [notes],
        ),
        returnValue: _i13.Future<List<int>>.value(<int>[]),
      ) as _i13.Future<List<int>>);

  @override
  _i13.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i47.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i6.BaseResponse<_i22.TokenModel>> login(
          _i23.LoginDto? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [payload],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i22.TokenModel>>.value(
            _FakeBaseResponse_7<_i22.TokenModel>(
          this,
          Invocation.method(
            #login,
            [payload],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i22.TokenModel>>);

  @override
  _i13.Future<_i6.BaseResponse<_i24.AuthValidateModel>> validateAuth() =>
      (super.noSuchMethod(
        Invocation.method(
          #validateAuth,
          [],
        ),
        returnValue:
            _i13.Future<_i6.BaseResponse<_i24.AuthValidateModel>>.value(
                _FakeBaseResponse_7<_i24.AuthValidateModel>(
          this,
          Invocation.method(
            #validateAuth,
            [],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i24.AuthValidateModel>>);

  @override
  _i13.Future<_i6.BaseResponse<void>> logout(_i35.LogoutDto? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #logout,
          [payload],
        ),
        returnValue:
            _i13.Future<_i6.BaseResponse<void>>.value(_FakeBaseResponse_7<void>(
          this,
          Invocation.method(
            #logout,
            [payload],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<void>>);

  @override
  _i13.Future<_i6.BaseResponse<void>> register(
          _i26.RegisterRequestModel? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [payload],
        ),
        returnValue:
            _i13.Future<_i6.BaseResponse<void>>.value(_FakeBaseResponse_7<void>(
          this,
          Invocation.method(
            #register,
            [payload],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<void>>);

  @override
  _i13.Future<_i6.BaseResponse<_i22.TokenModel>> refreshToken(
          _i27.RefreshTokenDto? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [payload],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i22.TokenModel>>.value(
            _FakeBaseResponse_7<_i22.TokenModel>(
          this,
          Invocation.method(
            #refreshToken,
            [payload],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i22.TokenModel>>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i48.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i6.BaseResponse<_i21.UserModel>> getUserById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserById,
          [id],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i21.UserModel>>.value(
            _FakeBaseResponse_7<_i21.UserModel>(
          this,
          Invocation.method(
            #getUserById,
            [id],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i21.UserModel>>);

  @override
  _i13.Future<_i7.UserMeModel> getMe() => (super.noSuchMethod(
        Invocation.method(
          #getMe,
          [],
        ),
        returnValue: _i13.Future<_i7.UserMeModel>.value(_FakeUserMeModel_8(
          this,
          Invocation.method(
            #getMe,
            [],
          ),
        )),
      ) as _i13.Future<_i7.UserMeModel>);
}

/// A class which mocks [NoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteService extends _i1.Mock implements _i49.NoteService {
  MockNoteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i6.BaseResponse<_i12.NoteModel>> createNote(
          _i29.NoteDto? note) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNote,
          [note],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i12.NoteModel>>.value(
            _FakeBaseResponse_7<_i12.NoteModel>(
          this,
          Invocation.method(
            #createNote,
            [note],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i12.NoteModel>>);

  @override
  _i13.Future<_i6.BaseResponse<List<_i12.NoteModel>>> fetchNotes(
    int? page,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNotes,
          [
            page,
            limit,
          ],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<List<_i12.NoteModel>>>.value(
            _FakeBaseResponse_7<List<_i12.NoteModel>>(
          this,
          Invocation.method(
            #fetchNotes,
            [
              page,
              limit,
            ],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<List<_i12.NoteModel>>>);

  @override
  _i13.Future<_i6.BaseResponse<_i12.NoteModel>> getNoteById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNoteById,
          [id],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i12.NoteModel>>.value(
            _FakeBaseResponse_7<_i12.NoteModel>(
          this,
          Invocation.method(
            #getNoteById,
            [id],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i12.NoteModel>>);

  @override
  _i13.Future<_i6.BaseResponse<_i12.NoteModel>> updateNote(
    int? id,
    _i29.NoteDto? note,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [
            id,
            note,
          ],
        ),
        returnValue: _i13.Future<_i6.BaseResponse<_i12.NoteModel>>.value(
            _FakeBaseResponse_7<_i12.NoteModel>(
          this,
          Invocation.method(
            #updateNote,
            [
              id,
              note,
            ],
          ),
        )),
      ) as _i13.Future<_i6.BaseResponse<_i12.NoteModel>>);

  @override
  _i13.Future<void> deleteNote(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [id],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i8.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.IOSOptions get iOptions => (super.noSuchMethod(
        Invocation.getter(#iOptions),
        returnValue: _FakeIOSOptions_9(
          this,
          Invocation.getter(#iOptions),
        ),
      ) as _i8.IOSOptions);

  @override
  _i8.AndroidOptions get aOptions => (super.noSuchMethod(
        Invocation.getter(#aOptions),
        returnValue: _FakeAndroidOptions_10(
          this,
          Invocation.getter(#aOptions),
        ),
      ) as _i8.AndroidOptions);

  @override
  _i8.LinuxOptions get lOptions => (super.noSuchMethod(
        Invocation.getter(#lOptions),
        returnValue: _FakeLinuxOptions_11(
          this,
          Invocation.getter(#lOptions),
        ),
      ) as _i8.LinuxOptions);

  @override
  _i8.WindowsOptions get wOptions => (super.noSuchMethod(
        Invocation.getter(#wOptions),
        returnValue: _FakeWindowsOptions_12(
          this,
          Invocation.getter(#wOptions),
        ),
      ) as _i8.WindowsOptions);

  @override
  _i8.WebOptions get webOptions => (super.noSuchMethod(
        Invocation.getter(#webOptions),
        returnValue: _FakeWebOptions_13(
          this,
          Invocation.getter(#webOptions),
        ),
      ) as _i8.WebOptions);

  @override
  _i8.MacOsOptions get mOptions => (super.noSuchMethod(
        Invocation.getter(#mOptions),
        returnValue: _FakeMacOsOptions_14(
          this,
          Invocation.getter(#mOptions),
        ),
      ) as _i8.MacOsOptions);

  @override
  void registerListener({
    required String? key,
    required _i3.ValueChanged<String?>? listener,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerListener,
          [],
          {
            #key: key,
            #listener: listener,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterListener({
    required String? key,
    required _i3.ValueChanged<String?>? listener,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #unregisterListener,
          [],
          {
            #key: key,
            #listener: listener,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterAllListenersForKey({required String? key}) =>
      super.noSuchMethod(
        Invocation.method(
          #unregisterAllListenersForKey,
          [],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterAllListeners() => super.noSuchMethod(
        Invocation.method(
          #unregisterAllListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> write({
    required String? key,
    required String? value,
    _i8.IOSOptions? iOptions,
    _i8.AndroidOptions? aOptions,
    _i8.LinuxOptions? lOptions,
    _i8.WebOptions? webOptions,
    _i8.MacOsOptions? mOptions,
    _i8.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<String?> read({
    required String? key,
    _i8.IOSOptions? iOptions,
    _i8.AndroidOptions? aOptions,
    _i8.LinuxOptions? lOptions,
    _i8.WebOptions? webOptions,
    _i8.MacOsOptions? mOptions,
    _i8.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i13.Future<String?>.value(),
      ) as _i13.Future<String?>);

  @override
  _i13.Future<bool> containsKey({
    required String? key,
    _i8.IOSOptions? iOptions,
    _i8.AndroidOptions? aOptions,
    _i8.LinuxOptions? lOptions,
    _i8.WebOptions? webOptions,
    _i8.MacOsOptions? mOptions,
    _i8.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> delete({
    required String? key,
    _i8.IOSOptions? iOptions,
    _i8.AndroidOptions? aOptions,
    _i8.LinuxOptions? lOptions,
    _i8.WebOptions? webOptions,
    _i8.MacOsOptions? mOptions,
    _i8.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<Map<String, String>> readAll({
    _i8.IOSOptions? iOptions,
    _i8.AndroidOptions? aOptions,
    _i8.LinuxOptions? lOptions,
    _i8.WebOptions? webOptions,
    _i8.MacOsOptions? mOptions,
    _i8.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i13.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i13.Future<Map<String, String>>);

  @override
  _i13.Future<void> deleteAll({
    _i8.IOSOptions? iOptions,
    _i8.AndroidOptions? aOptions,
    _i8.LinuxOptions? lOptions,
    _i8.WebOptions? webOptions,
    _i8.MacOsOptions? mOptions,
    _i8.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<bool?> isCupertinoProtectedDataAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isCupertinoProtectedDataAvailable,
          [],
        ),
        returnValue: _i13.Future<bool?>.value(),
      ) as _i13.Future<bool?>);
}

/// A class which mocks [TokenManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenManager extends _i1.Mock implements _i50.TokenManager {
  MockTokenManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isTokenExpired(String? token) => (super.noSuchMethod(
        Invocation.method(
          #isTokenExpired,
          [token],
        ),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> decodeToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #decodeToken,
          [token],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i51.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Stream<bool> get onConnectivityChanged => (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i13.Stream<bool>.empty(),
      ) as _i13.Stream<bool>);
}

/// A class which mocks [SocketChannelFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocketChannelFactory extends _i1.Mock
    implements _i41.SocketChannelFactory {
  MockSocketChannelFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.WebSocketChannel create(String? url) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [url],
        ),
        returnValue: _FakeWebSocketChannel_15(
          this,
          Invocation.method(
            #create,
            [url],
          ),
        ),
      ) as _i9.WebSocketChannel);
}

/// A class which mocks [WebSocketSink].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketSink extends _i1.Mock implements _i9.WebSocketSink {
  MockWebSocketSink() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<dynamic> get done => (super.noSuchMethod(
        Invocation.getter(#done),
        returnValue: _i13.Future<dynamic>.value(),
      ) as _i13.Future<dynamic>);

  @override
  _i13.Future<dynamic> close([
    int? closeCode,
    String? closeReason,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #close,
          [
            closeCode,
            closeReason,
          ],
        ),
        returnValue: _i13.Future<dynamic>.value(),
      ) as _i13.Future<dynamic>);

  @override
  void add(dynamic data) => super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<dynamic> addStream(_i13.Stream<dynamic>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStream,
          [stream],
        ),
        returnValue: _i13.Future<dynamic>.value(),
      ) as _i13.Future<dynamic>);
}
